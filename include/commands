DEF_CMD_(HLT,
{
	spu_status = LogDump(proc);
	SPU_ERROR_DEMO(spu_status);

	return SPU_NO_ERROR;
})

DEF_CMD_(PUSH,
{
	STACK_PUSH(&proc->stk, *GetArg(proc));
})

#define POP(what)  STACK_POP(&proc->stk, (what))

DEF_CMD_(POP,
{
	Stack_elem_t x = 0;

	POP(&x);

	*GetArg(proc) = x;
})

#define MATH_OP(sign) {						 \
	Stack_elem_t x1 = 0;					\
	Stack_elem_t x2 = 0;					\
	STACK_POP(&proc->stk, &x1);				\
	STACK_POP(&proc->stk, &x2);				\
	STACK_PUSH(&proc->stk, x2 sign x1);		\
}

DEF_CMD_(ADD, MATH_OP(+))
DEF_CMD_(SUB, MATH_OP(-))
DEF_CMD_(DIV, MATH_OP(/))
DEF_CMD_(MUL, MATH_OP(*))

#undef MATH_OP

DEF_CMD_(GOL,
{
	Stack_elem_t x = 0;

	STACK_POP(&proc->stk, &x);

	for (size_t i = 0; i < (size_t)x; i++)
		printf("GOL!\n");
})

DEF_CMD_(IDIV,
{
	Stack_elem_t x1 = 0;
	Stack_elem_t x2 = 0;

	STACK_POP(&proc->stk, &x1);
	STACK_POP(&proc->stk, &x2);

	STACK_PUSH(&proc->stk, int(x2 / x1));
})

DEF_CMD_(MOD,
{
	Stack_elem_t x1 = 0;
	Stack_elem_t x2 = 0;

	STACK_POP(&proc->stk, &x1);
	STACK_POP(&proc->stk, &x2);

	STACK_PUSH(&proc->stk, (int)x2 % (int)x1);
})

DEF_CMD_(IN,
{
	Stack_elem_t x = 0;

	printf(YELLOW("Enter your number:")" ");
	scanf("%lg", &x);

	STACK_PUSH(&proc->stk, x);
})

DEF_CMD_(OUT,
{
	Stack_elem_t result = 0;

	STACK_POP(&proc->stk, &result);

	printf(GREEN("result = %lg")"\n", result);
})

#define MATH_FUNC(func) {					\
	Stack_elem_t x = 0;						\
	STACK_POP(&proc->stk, &x);				\
	STACK_PUSH(&proc->stk, sqrt(x));		\
}

DEF_CMD_(SQRT, MATH_FUNC(sqrt(x)))
DEF_CMD_(SIN,  MATH_FUNC(sin(x)))
DEF_CMD_(COS,  MATH_FUNC(cos(x)))

#undef MATH_FUNC

#define JMPS(sign) {								\
	Stack_elem_t x1 = 0;							\
	Stack_elem_t x2 = 0;							\
	STACK_POP(&proc->stk, &x1);						\
	STACK_POP(&proc->stk, &x2);						\
	if (x2 sign x1)									\
		proc->pc = (size_t)*GetArg(proc) - 1;		\
	else											\
		proc->pc += sizeof(Immediate_t);			\
}

DEF_CMD_(JB, JMPS(<))
DEF_CMD_(JA, JMPS(>))
DEF_CMD_(JBE, JMPS(<=))

#undef JMPS

DEF_CMD_(JMP,
{
	proc->pc = (size_t)*GetArg(proc) - 1;
})

DEF_CMD_(JE,
{
	Stack_elem_t x1 = 0;
	Stack_elem_t x2 = 0;

	STACK_POP(&proc->stk, &x1);
	STACK_POP(&proc->stk, &x2);

	if (CompareDouble(x1, x2))
		proc->pc = (size_t)*GetArg(proc) - 1;
	else
		proc->pc += sizeof(Immediate_t);
})

DEF_CMD_(JNE,
{
	Stack_elem_t x1 = 0;
	Stack_elem_t x2 = 0;

	STACK_POP(&proc->stk, &x1);
	STACK_POP(&proc->stk, &x2);

	if (CompareDouble(x1, x2) == 0)
		proc->pc = (size_t)*GetArg(proc) - 1;
	else
		proc->pc += sizeof(Immediate_t);
})

DEF_CMD_(CALL,
{
	STACK_PUSH(&proc->ret_addr_stk, proc->pc + 1);
	proc->pc = (size_t)*GetArg(proc) - 1;
})

DEF_CMD_(RET,
{
	Stack_elem_t ret = 0;

	STACK_POP(&proc->ret_addr_stk, &ret);

	proc->pc = (u_int64_t)ret + sizeof(Immediate_t) - 1;
})

DEF_CMD_(DRAW,
{
	for (size_t i = 0; i < RAM_SIZE;) {
		for (size_t j = 0; j < DRAW_WIDTH; j++) {
			if (CompareDouble(proc->ram[i++], 0))
				printf(". ");
			else
				printf("* ");
		}
		printf("\n");
	}
})
